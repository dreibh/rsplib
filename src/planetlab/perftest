#!/usr/bin/env bash
#
# Thomas Dreibholz's PlanetLab Script Collection
# Copyright (C) 2005-2024 by Thomas Dreibholz, thomas.dreibholz@gmail.com
#
# $Id$
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Contact: thomas.dreibholz@gmail.com
#

if [ $# -lt 8 ] ; then
   echo "Usage: perftest [Test Name] [Prefix] [PEs] [PUs] [ReregInterval] [InterHResTime] [MaxHResItems] [Duration]" >&2
   exit 1
fi


TESTNAME="$1"
PREFIX="$TESTNAME/$2"
PEs="$3"
PUs="$4"
REREGINTERVAL="$5"
INTERHRESTIME="$6"
MAXHRESITEMS="$7"
DURATION="$8"

LAUNCH_DELAY=""   # sleep 0.1"
SHUTDOWN_DELAY="sleep 60"
POOLHANDLE="EchoPool"


HOST_PR="132.252.151.157"
HOST_LIST="132.252.152.70 132.252.152.71 132.252.152.72 132.252.152.73 132.252.152.74 132.252.152.75 132.252.152.76 132.252.152.77 132.252.152.78 132.252.152.79"
CSPOPT="-cspserver=132.252.151.157:2960 -cspinterval=333"

#HOST_PR="localhost"
#HOST_LIST="localhost"
#CSPOPT="-cspserver=127.0.0.1:2960 -cspinterval=333"




# ====== Choose host from HOST_LIST in round robin order ====================
CHOOSE_HOST=""
CHOOSE_HOST_LAST=0
choose_host ()
{
   oldGetHostLast=$CHOOSE_HOST_LAST
   CHOOSE_HOST_LAST=0
   for myHost in $HOST_LIST ; do
      if [ $CHOOSE_HOST_LAST -gt $oldGetHostLast ] ; then
         CHOOSE_HOST=$myHost
         return
      fi 
      let CHOOSE_HOST_LAST=$CHOOSE_HOST_LAST+1
   done

   for myHost in $HOST_LIST ; do
      CHOOSE_HOST=$myHost
      CHOOSE_HOST_LAST=0
      return
   done
}


# ====== Get file via scp ===================================================
fetchfile ()
{
   SERVER=$1
   INFILE=$2
   OUTFILE=$3
   scp -q -C $CC_SSHOPT -i $CC_REMOTEKEY $CC_REMOTEUSER@$SERVER:"~/src/rsplib2/rsplib/$INFILE" $OUTFILE
}


# ====== Get uptime =========================================================
get_uptime ()
{
   cat /proc/uptime | (
      read up idle
      echo $up
   )
}


# ====== Start scenario =====================================================
if [ ! -e "$TESTNAME" ] ; then
   mkdir "$TESTNAME"
fi
if [ -e "$PREFIX/runtimes.data" ] ; then
   echo "##################################################"
   echo "$PREFIX is already there -> skipping!"
   echo "##################################################"
   exit 0
fi
rm -rf "$PREFIX"
mkdir "$PREFIX"

. ./Lab-User.config
. ./ComponentControl.config PR

ALL_HOSTS="`( for HOST in $HOST_LIST $HOST_PR ; do
                 echo $HOST
              done ) | sort -u`"

echo "   + Preparing test for the following parameters:"
echo "      - Hosts: $ALL_HOSTS"
echo "      - $PEs PEs, $PUs PUs"
echo "      - ReregInterval: $REREGINTERVAL [ms]"
echo "      - InterHResTime: $INTERHRESTIME [ms]"
echo "      - MaxHResItems:  $MAXHRESITEMS"
echo "      - Duration:      $DURATION [s]"
echo "      - $PEs PEs, $PUs PUs"
echo "      - $PEs PEs, $PUs PUs"


# ------ Stop all -----------------------------------------------------------
echo "   + `date`: Stopping all old stuff ..."
KILL_PROCS="registrar server hrestest"
KILL_CMDS=""
for p in $KILL_PROCS ; do
   KILL_CMDS="$KILL_CMDS ; killall -KILL $p 2>/dev/null ; killall -q -KILL lt-$p 2>/dev/null"
   KILL_CMDS="$KILL_CMDS ; killall -KILL $p 2>/dev/null ; killall -q -KILL .libs/lt-$p 2>/dev/null"
   KILL_CMDS="$KILL_CMDS ; ./rootshell /usr/bin/killall -KILL $p 2>/dev/null ; ./rootshell /usr/bin/killall -q -KILL lt-$p 2>/dev/null"
done
for HOST in $ALL_HOSTS ; do
   ssh -q -C $CC_SSHOPT -i $CC_REMOTEKEY $CC_REMOTEUSER@$HOST "\
      cd ~/src/rsplib2/rsplib $KILL_CMDS ; echo \"      - \`hostname\` (\`uname -a\`)\"" &
done
wait
rm -f TestP?-*.pid
echo "   + `date`: Ready. Waiting 5 seconds ..."
sleep 5


# ------ Remember current time ----------------------------------------------
UPTIME_STARTUP=$(get_uptime)


# ------ Start PR -----------------------------------------------------------
echo "   + `date`: Starting PR ..."
./RemoteComponentControl ./Lab-User.config $HOST_PR ./ComponentControl.config PR TestPR-1 start \
   -maxhresitems=$MAXHRESITEMS -loglevel=3 -statsfile=TestPR-1.data -statsinterval=250 $CSPOPT
sleep 10


# ------ Start PEs ----------------------------------------------------------
echo "   + `date`: Starting $PEs PEs ..."
for HOST in $ALL_HOSTS ; do
   rm -f $PREFIX/PE-start-$HOST.sh
done
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   ./RemoteComponentControl WriteCmdOnly $PREFIX/PE-start-$CHOOSE_HOST.sh ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PE TestPE-$i start \
      -registrar=$HOST_PR:$SYSTEM_PR_ASAP_PORT \
      -loglevel=3 \
      -poolhandle=$POOLHANDLE -rereginterval=$REREGINTERVAL -echo -policy=RoundRobin
   echo $LAUNCH_DELAY >>$PREFIX/PE-start-$CHOOSE_HOST.sh
   let i=$i+1
done
for HOST in $ALL_HOSTS ; do
   if [ -e $PREFIX/PE-start-$HOST.sh ] ; then
      echo "Contacting $CC_REMOTEUSER@$HOST ..."
      echo "wait" >>$PREFIX/PE-start-$HOST.sh
      cat $PREFIX/PE-start-$HOST.sh | ssh -i $CC_REMOTEKEY $CC_SSHOPT $CC_REMOTEUSER@$HOST &
   fi
done
wait
sleep 10


# ------ Start PUs ----------------------------------------------------------
echo "   + `date`: Starting $PUs PUs ..."
for HOST in $ALL_HOSTS ; do
   rm -f $PREFIX/PU-start-$HOST.sh
done
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   ./RemoteComponentControl WriteCmdOnly $PREFIX/PU-start-$CHOOSE_HOST.sh ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PU TestPU-$i start \
      -registrar=$HOST_PR:$SYSTEM_PR_ASAP_PORT \
      -poolhandle=$POOLHANDLE -pause=$INTERHRESTIME -quiet -statsfile=TestPU-$i.data -statsinterval=250
   echo $LAUNCH_DELAY >>$PREFIX/PU-start-$CHOOSE_HOST.sh
   let i=$i+1
done
for HOST in $ALL_HOSTS ; do
   if [ -e $PREFIX/PU-start-$HOST.sh ] ; then
      echo "Contacting $CC_REMOTEUSER@$HOST ..."
      echo "wait" >>$PREFIX/PU-start-$HOST.sh
      cat $PREFIX/PU-start-$HOST.sh | ssh -i $CC_REMOTEKEY $CC_SSHOPT $CC_REMOTEUSER@$HOST &
   fi
done
wait


# ====== Run tests ==========================================================
echo "   + `date`: Running test for $DURATION seconds ..."
UPTIME_MSTART=$(get_uptime)
sleep $DURATION
UPTIME_MEND=$(get_uptime)


# ====== Stop scenario ======================================================

# ------ Stop PUs -----------------------------------------------------------
echo "   + `date`: Stopping PUs ..."
for HOST in $ALL_HOSTS ; do
   rm -f $PREFIX/PU-stop-$HOST.sh
done
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   ./RemoteComponentControl WriteCmdOnly $PREFIX/PU-stop-$CHOOSE_HOST.sh ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PU TestPU-$i stop
   let i=$i+1
   # echo $LAUNCH_DELAY >>$PREFIX/PU-stop-$CHOOSE_HOST.sh
done
for HOST in $ALL_HOSTS ; do
   if [ -e $PREFIX/PU-stop-$HOST.sh ] ; then
      echo "Contacting $CC_REMOTEUSER@$HOST ..."
      echo "wait" >>$PREFIX/PU-stop-$HOST.sh
      cat $PREFIX/PU-stop-$HOST.sh | ssh -i $CC_REMOTEKEY $CC_SSHOPT $CC_REMOTEUSER@$HOST &
   fi
done
wait

# ------ Stop PEs -----------------------------------------------------------
echo "   + `date`: Stopping PEs ..."
for HOST in $ALL_HOSTS ; do
   rm -f $PREFIX/PE-stop-$HOST.sh
done
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   ./RemoteComponentControl WriteCmdOnly $PREFIX/PE-stop-$CHOOSE_HOST.sh ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PE TestPE-$i stop
   let i=$i+1
   # echo $LAUNCH_DELAY >>$PREFIX/PE-stop-$CHOOSE_HOST.sh
done
for HOST in $ALL_HOSTS ; do
   if [ -e $PREFIX/PE-stop-$HOST.sh ] ; then
      echo "Contacting $CC_REMOTEUSER@$HOST ..."
      echo "wait" >>$PREFIX/PE-stop-$HOST.sh
      cat $PREFIX/PE-stop-$HOST.sh | ssh -i $CC_REMOTEKEY $CC_SSHOPT $CC_REMOTEUSER@$HOST &
   fi
done
wait

# ------ Stop PR ------------------------------------------------------------
echo "   + `date`: Stopping PR ..."
./RemoteComponentControl ./Lab-User.config $HOST_PR ./ComponentControl.config PR TestPR-1 stop
fetchfile $HOST_PR "TestPR-1.data" "$PREFIX/TestPR-1.data"

UPTIME_SHUTDOWN=$(get_uptime)


echo "Startup MeasurementStart MeasurementEnd Shutdown" >$PREFIX/runtimes.data
echo "1 $UPTIME_STARTUP $UPTIME_MSTART $UPTIME_MEND $UPTIME_SHUTDOWN" >>$PREFIX/runtimes.data


$SHUTDOWN_DELAY
