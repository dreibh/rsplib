#!/usr/bin/env bash
# --------------------------------------------------------------------------
#
#              //===//   //=====   //===//   //       //   //===//
#             //    //  //        //    //  //       //   //    //
#            //===//   //=====   //===//   //       //   //===<<
#           //   \\         //  //        //       //   //    //
#          //     \\  =====//  //        //=====  //   //===//   Version III
#
# ------------- An Efficient RSerPool Prototype Implementation -------------
#
# Copyright (C) 2002-2023 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

if [ $# -lt 1 ] ; then
   echo "Usage: ssdistribute [Unique ID] [Environment] [Keyring] [Key]"
   exit 1
fi
DIRECTORY="."
UNIQUE_ID="$1"
ENVIRONMENT="$2"
KEYRING="$3"
KEY="$4"
shift ; shift ; shift ; shift

POOLHANDLE="ScriptingPool"


SS_TEMPDIR="ssTEMP-$UNIQUE_ID"
SS_IN_NAME="ssIN-$UNIQUE_ID.tar.gz"
SS_OUT_NAME="ssOUT-$UNIQUE_ID.tar.gz"

SS_ENVIRONMENT_BYTES=30000000
SS_INPUT_BYTES=2500
SS_OUTPUT_BYTES=2000


# This is the run script.
SS_RUNSCRIPT=" \
 OUTPUT_ARCHIVE=\$1
 ENVIRONMENT_FILE=\$2
 echo \"This is the run script!\" && \
 echo \"   + Output will be written to \\\"\$OUTPUT_ARCHIVE\\\" ...\" && \
 echo \"   + Input string is \\\"\`cat my-input.data\`\\\"\" && \
 if [ \"\$ENVIRONMENT_FILE\" != \"\" ] ; then \
    echo \"   + Environment file is \\\"\$ENVIRONMENT_FILE\\\" ...\" && \
    echo \"     SHA1 hash is:\" && \
    sha1sum \$ENVIRONMENT_FILE ; \
 fi && \
 \
 echo \"   + Simulating some work (your program may do something more useful here!)\" && \
 date >my-output.data && \
 dd if=/dev/urandom of=my-output.random bs=$SS_OUTPUT_BYTES count=1 && \
 sleep 10 && \
 \
 echo \"   + Writing results archive \\\"\$OUTPUT_ARCHIVE\\\" ...\" && \
 tar czvf \$OUTPUT_ARCHIVE my-output.data my-output.random && \
 \
 echo \"   + Script processing successfully finished!\"
"


echo "Preparing input ..." && \
if [ -e "$DIRECTORY/$SS_TEMPDIR" ] ; then
   rm -rf "$DIRECTORY/$SS_TEMPDIR"
fi
echo "   + Creating directory \"$DIRECTORY/$SS_TEMPDIR\"" && \
mkdir "$DIRECTORY/$SS_TEMPDIR" && \
echo "   + Changing to directory \"$DIRECTORY/$SS_TEMPDIR\" ..." && \
cd "$DIRECTORY/$SS_TEMPDIR" &&  \
\
echo "   + Writing input files \"my-input.data\" and \"my-input.random\" ..." && \
echo "This is an example input for ID $UNIQUE_ID" >my-input.data && \
dd if=/dev/urandom of=my-input.random bs=$SS_INPUT_BYTES count=1 && \
\
echo "   + Writing runscript \"ssrun\" ..." && \
echo "$SS_RUNSCRIPT" >ssrun && \
\
echo "   + Archiving \"ssrun\" and \"my-input.data\" into \"$SS_IN_NAME\" ..." && \
tar chzf ../$SS_IN_NAME ssrun my-input.data my-input.random && \
cd .. || exit 1


if [ "$ENVIRONMENT" != "" ] ; then
   if [ ! -e "$ENVIRONMENT" ] ; then
      echo "   + Creating environment file \"$ENVIRONMENT\" ..."
      dd if=/dev/urandom of=$ENVIRONMENT bs=$SS_ENVIRONMENT_BYTES count=1 || exit 1
   fi
fi


if [ "$KEYRING" != "" -a "$KEY" != "" ] ; then
   echo "   + Signing \"$SS_IN_NAME\" ..." && \
   rm -f "$SS_IN_NAME.signed"
   gpg --no-default-keyring "--keyring=$KEYRING" --local-user "$KEY" --sign --output "$SS_IN_NAME.signed" "$SS_IN_NAME" || exit 1
   SS_IN_FILE="$SS_IN_NAME.signed"
   
   if  [ "$ENVIRONMENT" != "" ] ; then
      echo "   + Signing \"$ENVIRONMENT\" ..." && \
      rm -f "$ENVIRONMENT.signed"
      gpg --no-default-keyring "--keyring=$KEYRING" --local-user "$KEY" --sign --output "$ENVIRONMENT.signed" "$ENVIRONMENT" || exit 1

      SS_IN_FILE="$SS_IN_NAME.signed"
      ENVIRONMENT_FILE="$ENVIRONMENT.signed"
   fi
else
   echo "   + NOTE: Skipping signature!"
   SS_IN_FILE="$SS_IN_NAME"
   ENVIRONMENT_FILE="$ENVIRONMENT"
fi


echo "Distributing and processing ..."
echo "   + Input file is \"$SS_IN_NAME\""
echo "   + Output will be written into \"$SS_OUT_NAME\""
echo "   + Calling scriptingclient ..."
echo ""

env PATH=$PATH:. scriptingclient -runid="Example ID=$UNIQUE_ID" "-environment=$ENVIRONMENT_FILE" "-input=$SS_IN_FILE" "-output=$SS_OUT_NAME" "-poolhandle=$POOLHANDLE" $@ || exit 1
echo "   + scriptingclient has returned"



echo "Extracting ..."
if [ -s "$SS_OUT_NAME" ] ; then
   echo "   + Unpacking output file \"$SS_OUT_NAME\" ..."
   ( tar xzvf "$SS_OUT_NAME" | xargs touch ) || exit 1   # This will also update the time stamp!
   echo "   + Results string is \"`cat my-output.data`\""
   echo "   + Removing temporary files $SS_IN_NAME and $SS_OUT_NAME ..."
   rm -f "$SS_IN_NAME" "$SS_IN_FILE" "$SS_OUT_NAME"
   echo "   + Removing temporary directory $SS_TEMPDIR"
   rm -rf "$SS_TEMPDIR"
   exit 0
else
   echo "ERROR: No results have been created in directory $DIRECTORY!"
   exit 1
fi
